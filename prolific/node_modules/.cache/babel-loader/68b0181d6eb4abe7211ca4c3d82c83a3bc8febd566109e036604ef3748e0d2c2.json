{"ast":null,"code":"var _jsxFileName = \"C:\\\\PIOSA-updated\\\\PIOSA\\\\prolific (2)\\\\prolific\\\\src\\\\Components\\\\ChatBot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatBot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isOpen, setIsOpen] = useState(false);\n  const [showPopup, setShowPopup] = useState(true);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [userInfo, setUserInfo] = useState({\n    name: '',\n    email: '',\n    contactNumber: '',\n    companyName: ''\n  });\n  const [firstInteraction, setFirstInteraction] = useState(true);\n  const questions = ['May I know your full name?', `Nice to meet you, ${userInfo.name}. What is your official email address?`, 'Thank you! 2 more questions and we are good to go! Please share your contact number.', \"Finally, what's the name of the organization you work for?\"];\n  const sendMessage = () => {\n    if (input.trim()) {\n      const newMessages = [...messages, {\n        text: input,\n        sender: 'user'\n      }];\n      setMessages(newMessages);\n      setInput('');\n\n      // Save user info based on the current question\n      if (currentQuestionIndex === 1) {\n        setUserInfo({\n          ...userInfo,\n          name: input\n        });\n      } else if (currentQuestionIndex === 2) {\n        setUserInfo({\n          ...userInfo,\n          email: input\n        });\n      } else if (currentQuestionIndex === 3) {\n        setUserInfo({\n          ...userInfo,\n          contactNumber: input\n        });\n      } else if (currentQuestionIndex === 4) {\n        setUserInfo({\n          ...userInfo,\n          companyName: input\n        });\n      }\n\n      // Determine the next question or finish the conversation\n      if (currentQuestionIndex < questions.length) {\n        const nextQuestion = currentQuestionIndex === 1 ? `Nice to meet you, ${input}. What is your official email address?` : questions[currentQuestionIndex];\n        setMessages([...newMessages, {\n          text: nextQuestion,\n          sender: 'bot'\n        }]);\n        setCurrentQuestionIndex(currentQuestionIndex + 1);\n      } else {\n        setMessages([...newMessages, {\n          text: 'Noted and Thank you for the information. Our Sales Team will be in touch with you soon.',\n          sender: 'bot'\n        }]);\n        saveUserData(); // Save the user data after the final question\n      }\n    }\n  };\n  const saveUserData = async () => {\n    try {\n      console.log(userInfo, \"Sending user info\");\n      const response = await fetch('http://127.0.0.1:5000/ChatBot', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(userInfo)\n      });\n      if (response.ok) {\n        const responseData = await response.json();\n        console.log('User data saved successfully:', responseData);\n      } else {\n        const errorData = await response.json();\n        console.error('Error saving user data:', errorData);\n      }\n    } catch (error) {\n      console.error('Error saving user data:', error);\n    }\n  };\n  useEffect(() => {\n    const timer = setTimeout(() => setShowPopup(false), 5000);\n    return () => clearTimeout(timer);\n  }, []);\n  useEffect(() => {\n    if (currentQuestionIndex === 0 && (isOpen || firstInteraction)) {\n      const initialQuestion = questions[currentQuestionIndex];\n      setMessages([{\n        text: initialQuestion,\n        sender: 'bot'\n      }]);\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    }\n  }, [isOpen, firstInteraction]);\n  useEffect(() => {\n    if (firstInteraction) {\n      setIsOpen(true);\n      setFirstInteraction(false);\n    }\n  }, [firstInteraction]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fixed bottom-4 right-4\",\n    children: isOpen ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-80 bg-white   rounded-lg shadow-lg\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-4 border-b border-pu flex justify-between items-center bg-purple-800\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-lg font-bold text-white bg-purple-800\",\n          children: \"GlobalXperts Bot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setIsOpen(false),\n          className: \"text-4xl text-white\",\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-4 h-64 overflow-y-auto\",\n        children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `mb-2 ${message.sender === 'user' ? 'text-right' : 'text-left'}`,\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: `inline-block p-2 rounded-lg ${message.sender === 'user' ? 'bg-purple-800 text-white' : 'bg-gray-200'}`,\n            children: message.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 17\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-4 border-t border-gray-300 flex\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"flex-1 p-2 border border-gray-300 rounded-lg\",\n          value: input,\n          onChange: e => setInput(e.target.value),\n          onKeyPress: e => e.key === 'Enter' ? sendMessage() : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: sendMessage,\n          className: \"ml-2 px-4 py-2 bg-purple-800 text-white rounded-lg\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"relative\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setIsOpen(true),\n        className: \"bg-purple-800 text-white p-4 rounded-full shadow-lg focus:outline-none animate-blink\",\n        children: \"\\uD83D\\uDCAC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatBot, \"56LgtNQjdmzp/iTc2bcMnIgXaGc=\");\n_c = ChatBot;\nexport default ChatBot;\nvar _c;\n$RefreshReg$(_c, \"ChatBot\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","ChatBot","_s","messages","setMessages","input","setInput","isOpen","setIsOpen","showPopup","setShowPopup","currentQuestionIndex","setCurrentQuestionIndex","userInfo","setUserInfo","name","email","contactNumber","companyName","firstInteraction","setFirstInteraction","questions","sendMessage","trim","newMessages","text","sender","length","nextQuestion","saveUserData","console","log","response","fetch","method","headers","body","JSON","stringify","ok","responseData","json","errorData","error","timer","setTimeout","clearTimeout","initialQuestion","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","message","index","type","value","onChange","e","target","onKeyPress","key","_c","$RefreshReg$"],"sources":["C:/PIOSA-updated/PIOSA/prolific (2)/prolific/src/Components/ChatBot.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\n\r\nconst ChatBot = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [input, setInput] = useState('');\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [showPopup, setShowPopup] = useState(true);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [userInfo, setUserInfo] = useState({\r\n    name: '',\r\n    email: '',\r\n    contactNumber: '',\r\n    companyName: ''\r\n  });\r\n  const [firstInteraction, setFirstInteraction] = useState(true);\r\n\r\n  const questions = [\r\n    'May I know your full name?',\r\n    `Nice to meet you, ${userInfo.name}. What is your official email address?`,\r\n    'Thank you! 2 more questions and we are good to go! Please share your contact number.',\r\n    \"Finally, what's the name of the organization you work for?\",\r\n  ];\r\n\r\n  const sendMessage = () => {\r\n    if (input.trim()) {\r\n      const newMessages = [...messages, { text: input, sender: 'user' }];\r\n      setMessages(newMessages);\r\n      setInput('');\r\n\r\n      // Save user info based on the current question\r\n      if (currentQuestionIndex === 1) {\r\n        setUserInfo({ ...userInfo, name: input });\r\n      } else if (currentQuestionIndex === 2) {\r\n        setUserInfo({ ...userInfo, email: input });\r\n      } else if (currentQuestionIndex === 3) {\r\n        setUserInfo({ ...userInfo, contactNumber: input });\r\n      } else if (currentQuestionIndex === 4) {\r\n        setUserInfo({ ...userInfo, companyName: input });\r\n      }\r\n\r\n      // Determine the next question or finish the conversation\r\n      if (currentQuestionIndex < questions.length) {\r\n        const nextQuestion =\r\n          currentQuestionIndex === 1\r\n            ? `Nice to meet you, ${input}. What is your official email address?`\r\n            : questions[currentQuestionIndex];\r\n        setMessages([...newMessages, { text: nextQuestion, sender: 'bot' }]);\r\n        setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n      } else {\r\n        setMessages([...newMessages, { text: 'Noted and Thank you for the information. Our Sales Team will be in touch with you soon.', sender: 'bot' }]);\r\n        saveUserData(); // Save the user data after the final question\r\n      }\r\n    }\r\n  };\r\n\r\n  const saveUserData = async () => {\r\n    try {\r\n      console.log(userInfo, \"Sending user info\");\r\n\r\n      const response = await fetch('http://127.0.0.1:5000/ChatBot', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(userInfo),\r\n      });\r\n\r\n      if (response.ok) {\r\n        const responseData = await response.json();\r\n        console.log('User data saved successfully:', responseData);\r\n      } else {\r\n        const errorData = await response.json();\r\n        console.error('Error saving user data:', errorData);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error saving user data:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => setShowPopup(false), 5000);\r\n    return () => clearTimeout(timer);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (currentQuestionIndex === 0 && (isOpen || firstInteraction)) {\r\n      const initialQuestion = questions[currentQuestionIndex];\r\n      setMessages([{ text: initialQuestion, sender: 'bot' }]);\r\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n    }\r\n  }, [isOpen, firstInteraction]);\r\n\r\n  useEffect(() => {\r\n    if (firstInteraction) {\r\n      setIsOpen(true);\r\n      setFirstInteraction(false);\r\n    }\r\n  }, [firstInteraction]);\r\n\r\n  return (\r\n    <div className=\"fixed bottom-4 right-4\">\r\n      {isOpen ? (\r\n        <div className=\"w-80 bg-white   rounded-lg shadow-lg\">\r\n          <div className=\"p-4 border-b border-pu flex justify-between items-center bg-purple-800\">\r\n            <h2 className=\"text-lg font-bold text-white bg-purple-800\">GlobalXperts Bot</h2>\r\n            <button onClick={() => setIsOpen(false)} className=\"text-4xl text-white\">×</button>\r\n          </div>\r\n          <div className=\"p-4 h-64 overflow-y-auto\">\r\n            {messages.map((message, index) => (\r\n              <div key={index} className={`mb-2 ${message.sender === 'user' ? 'text-right' : 'text-left'}`}>\r\n                <span className={`inline-block p-2 rounded-lg ${message.sender === 'user' ? 'bg-purple-800 text-white' : 'bg-gray-200'}`}>\r\n                  {message.text}\r\n                </span>\r\n              </div>\r\n            ))}\r\n          </div>\r\n          <div className=\"p-4 border-t border-gray-300 flex\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"flex-1 p-2 border border-gray-300 rounded-lg\"\r\n              value={input}\r\n              onChange={(e) => setInput(e.target.value)}\r\n              onKeyPress={(e) => (e.key === 'Enter' ? sendMessage() : null)}\r\n            />\r\n            <button onClick={sendMessage} className=\"ml-2 px-4 py-2 bg-purple-800 text-white rounded-lg\">Send</button>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div className=\"relative\">\r\n          <button\r\n            onClick={() => setIsOpen(true)}\r\n            className=\"bg-purple-800 text-white p-4 rounded-full shadow-lg focus:outline-none animate-blink\"\r\n          >\r\n            💬\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatBot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}